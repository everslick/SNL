/**
	\mainpage

	This Library provides a powerful but easy to use interface to the POSIX   \n
	socket implementation. It has support for muteces, condition signals,     \n
	fast and secure blowfish encryption and an intelligent memory managment   \n
	system for it's imput buffers.

	\par Server Example Code

	\code
	#include <amanet/net.h>

	using namespace Net;

	class EchoSession : public Socket {
	public:
		void Read(void *buf, unsigned int len) {
			Write(buf, len);
		}
		void Error(void) {
			delete (this);
		}
	};

	class EchoServer : public Socket {
	public:
		void Accept(Client &client) {
			EchoSession *session = new EchoSession();
			session->Connect(client);
		}
		void Error(int error) {
			printf(" SOCKET ERROR: %i\n", error);
		}
	};

	int
	main(int argc, char **argv) {
		EchoServer *server = new EchoServer();

		if (server->Listen(NULL, 1111)) {
			puts("could not start server, exiting.");
			exit(-1);
		}
		while (1) sleep(1);
		return (0);
	}
	\endcode

	\par Client Example Code

	\code
	#include <amanet/net.h>

	using namespace Net;

	class EchoClient : public Socket {
	public:
		void Read(void *buf, int len) {
			printf("receiving: %s", (char *)buf);
		}
		void Error(int error) {
			puts("Server closed connection, exiting.");
			exit(-1);
		}
	};

	int
	main(int argc, char **argv) {
		EchoClient *client = new EchoClient();

		if (client->Connect(1111)) {
			puts("could not connect to server, exiting.");
			exit(-1);
		}
		while (1) {
			puts("sending: 1234567890");
			client->Write("1234567890", 10);
			sleep(1);
		}
		delete (client);
		return (0);
	}
	\endcode
*/
